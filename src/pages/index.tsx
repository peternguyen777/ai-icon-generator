import { TooltipProvider } from "@radix-ui/react-tooltip";
import { type NextPage } from "next";
import { signIn, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useState } from "react";
import { DownloadButton } from "~/components/download-button";
import { GenerateIconForm } from "~/components/generateIconForm/GenerateIconForm";
import { Button, buttonVariants } from "~/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "~/components/ui/card";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "~/components/ui/tooltip";

export interface GeneratedImage {
  id: string;
  prompt: string | null;
  imageUrl: string;
}

const GenerateGallery = ({
  generatedImages,
}: {
  generatedImages: GeneratedImage[];
}) => {
  return (
    <>
      {generatedImages.length > 0 && (
        <section className="grid justify-center gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          <TooltipProvider>
            {generatedImages.map((image) => (
              <Tooltip key={image.imageUrl}>
                <TooltipTrigger asChild>
                  <div className="relative">
                    <DownloadButton
                      fileName={image.id}
                      imageUrl={image.imageUrl}
                    />
                    <Link href={image.imageUrl} target="_blank">
                      <Image
                        alt="an image of generated prompt"
                        src={image.imageUrl}
                        width={256}
                        height={256}
                        className="rounded-lg border"
                      />
                    </Link>
                  </div>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{image.prompt}</p>
                </TooltipContent>
              </Tooltip>
            ))}
          </TooltipProvider>
        </section>
      )}
    </>
  );
};

const HomePage: NextPage = () => {
  const [generatedImages, setGeneratedImages] = useState<GeneratedImage[]>([]);
  const session = useSession();
  const isLoggedIn = !!session.data;

  return (
    <>
      <Head>
        <title>Icon Generator</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto my-8 flex flex-col px-8">
        <div className="grid lg:grid-cols-3 lg:gap-6">
          <Card className="min-h-[288px] w-full lg:col-span-1 lg:mr-8">
            {!isLoggedIn && (
              <>
                <CardHeader>
                  <CardTitle>Generate your icon</CardTitle>
                  <CardDescription>Login to begin prompting</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button onClick={() => void signIn("google")}>Login</Button>
                </CardContent>
              </>
            )}
            {isLoggedIn && (
              <>
                <CardHeader>
                  <CardTitle>Generate your icon</CardTitle>
                </CardHeader>
                <GenerateIconForm
                  setGeneratedImages={setGeneratedImages}
                  generatedImages={generatedImages}
                />
              </>
            )}
          </Card>

          {isLoggedIn && (
            <Card
              className={`mt-8 ${
                generatedImages ? `flex` : `hidden lg:flex`
              } w-full flex-col  bg-gray-50 lg:col-span-2 lg:mt-0`}
            >
              <>
                <CardHeader>
                  <CardTitle>Output</CardTitle>
                </CardHeader>
                <CardContent className="flex-grow">
                  {/* TODO: Work on this, add a carousel */}
                  <GenerateGallery generatedImages={generatedImages} />
                </CardContent>
              </>
              <CardFooter className="justify-end">
                <Link
                  className={buttonVariants({ variant: "default" })}
                  href="/collection"
                >
                  My collection
                </Link>
              </CardFooter>
            </Card>
          )}
        </div>
      </main>
    </>
  );
};

export default HomePage;
